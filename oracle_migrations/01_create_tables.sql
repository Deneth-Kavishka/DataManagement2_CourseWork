-- Oracle Migration: Create Tables for UrbanFood E-commerce Platform

-- Drop existing tables if they exist (in reverse order of creation to avoid foreign key constraints)
BEGIN
  FOR t IN (SELECT table_name FROM user_tables WHERE table_name IN (
    'ORDER_ITEMS', 
    'ORDERS', 
    'PRODUCTS', 
    'VENDORS', 
    'CATEGORIES', 
    'USERS'
  )) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS';
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    NULL; -- Ignore errors if tables don't exist
END;
/

-- Drop sequences if they exist
BEGIN
  FOR s IN (SELECT sequence_name FROM user_sequences WHERE sequence_name IN (
    'USERS_SEQ', 
    'CATEGORIES_SEQ', 
    'PRODUCTS_SEQ', 
    'VENDORS_SEQ', 
    'ORDERS_SEQ', 
    'ORDER_ITEMS_SEQ'
  )) LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE ' || s.sequence_name;
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    NULL; -- Ignore errors if sequences don't exist
END;
/

-- Create Users table
CREATE TABLE USERS (
  ID NUMBER PRIMARY KEY,
  USERNAME VARCHAR2(100) NOT NULL UNIQUE,
  PASSWORD VARCHAR2(255) NOT NULL,
  EMAIL VARCHAR2(255) NOT NULL UNIQUE,
  FIRST_NAME VARCHAR2(100) NOT NULL,
  LAST_NAME VARCHAR2(100) NOT NULL,
  ROLE VARCHAR2(20) DEFAULT 'customer' NOT NULL,
  IS_VERIFIED NUMBER(1) DEFAULT 0 NOT NULL,
  VERIFICATION_TOKEN VARCHAR2(255),
  RESET_TOKEN VARCHAR2(255),
  RESET_TOKEN_EXPIRES TIMESTAMP,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create sequence for USERS
CREATE SEQUENCE USERS_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for USERS auto-increment
CREATE OR REPLACE TRIGGER USERS_TRG
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
  SELECT USERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  :NEW.CREATED_AT := CURRENT_TIMESTAMP;
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create trigger for USERS updated_at
CREATE OR REPLACE TRIGGER USERS_UPD_TRG
BEFORE UPDATE ON USERS
FOR EACH ROW
BEGIN
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create Categories table
CREATE TABLE CATEGORIES (
  ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(100) NOT NULL UNIQUE,
  DESCRIPTION VARCHAR2(4000),
  IMAGE_URL VARCHAR2(500),
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create sequence for CATEGORIES
CREATE SEQUENCE CATEGORIES_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for CATEGORIES auto-increment
CREATE OR REPLACE TRIGGER CATEGORIES_TRG
BEFORE INSERT ON CATEGORIES
FOR EACH ROW
BEGIN
  SELECT CATEGORIES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  :NEW.CREATED_AT := CURRENT_TIMESTAMP;
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create trigger for CATEGORIES updated_at
CREATE OR REPLACE TRIGGER CATEGORIES_UPD_TRG
BEFORE UPDATE ON CATEGORIES
FOR EACH ROW
BEGIN
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create Vendors table
CREATE TABLE VENDORS (
  ID NUMBER PRIMARY KEY,
  USER_ID NUMBER NOT NULL UNIQUE,
  BUSINESS_NAME VARCHAR2(200) NOT NULL,
  DESCRIPTION VARCHAR2(4000),
  LOGO_URL VARCHAR2(500),
  ADDRESS VARCHAR2(500),
  CITY VARCHAR2(100),
  STATE VARCHAR2(100),
  POSTAL_CODE VARCHAR2(20),
  COUNTRY VARCHAR2(100) DEFAULT 'Sri Lanka' NOT NULL,
  PHONE VARCHAR2(50),
  WEBSITE VARCHAR2(255),
  BUSINESS_EMAIL VARCHAR2(255),
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  CONSTRAINT FK_VENDORS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- Create sequence for VENDORS
CREATE SEQUENCE VENDORS_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for VENDORS auto-increment
CREATE OR REPLACE TRIGGER VENDORS_TRG
BEFORE INSERT ON VENDORS
FOR EACH ROW
BEGIN
  SELECT VENDORS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  :NEW.CREATED_AT := CURRENT_TIMESTAMP;
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create trigger for VENDORS updated_at
CREATE OR REPLACE TRIGGER VENDORS_UPD_TRG
BEFORE UPDATE ON VENDORS
FOR EACH ROW
BEGIN
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create Products table
CREATE TABLE PRODUCTS (
  ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(200) NOT NULL,
  DESCRIPTION VARCHAR2(4000),
  PRICE NUMBER(10,2) NOT NULL,
  INVENTORY NUMBER(10) DEFAULT 0 NOT NULL,
  IMAGE_URL VARCHAR2(500),
  VENDOR_ID NUMBER NOT NULL,
  CATEGORY_ID NUMBER NOT NULL,
  IS_ORGANIC NUMBER(1) DEFAULT 0,
  IS_LOCAL NUMBER(1) DEFAULT 1,
  IS_FRESH_PICKED NUMBER(1) DEFAULT 0,
  WEIGHT_KG NUMBER(10,2),
  DIMENSIONS VARCHAR2(100),
  NUTRITIONAL_INFO VARCHAR2(1000),
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  CONSTRAINT FK_PRODUCTS_VENDOR FOREIGN KEY (VENDOR_ID) REFERENCES VENDORS(ID),
  CONSTRAINT FK_PRODUCTS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(ID)
);

-- Create sequence for PRODUCTS
CREATE SEQUENCE PRODUCTS_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for PRODUCTS auto-increment
CREATE OR REPLACE TRIGGER PRODUCTS_TRG
BEFORE INSERT ON PRODUCTS
FOR EACH ROW
BEGIN
  SELECT PRODUCTS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  :NEW.CREATED_AT := CURRENT_TIMESTAMP;
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create trigger for PRODUCTS updated_at
CREATE OR REPLACE TRIGGER PRODUCTS_UPD_TRG
BEFORE UPDATE ON PRODUCTS
FOR EACH ROW
BEGIN
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create Orders table
CREATE TABLE ORDERS (
  ID NUMBER PRIMARY KEY,
  USER_ID NUMBER NOT NULL,
  STATUS VARCHAR2(50) DEFAULT 'pending' NOT NULL,
  TOTAL NUMBER(10,2) NOT NULL,
  SHIPPING_ADDRESS VARCHAR2(500) NOT NULL,
  SHIPPING_CITY VARCHAR2(100) NOT NULL,
  SHIPPING_STATE VARCHAR2(100) NOT NULL,
  SHIPPING_POSTAL_CODE VARCHAR2(20) NOT NULL,
  SHIPPING_COUNTRY VARCHAR2(100) DEFAULT 'Sri Lanka' NOT NULL,
  SHIPPING_METHOD VARCHAR2(50) NOT NULL,
  SHIPPING_FEE NUMBER(10,2) NOT NULL,
  PAYMENT_METHOD VARCHAR2(50) NOT NULL,
  PAYMENT_STATUS VARCHAR2(50) DEFAULT 'pending' NOT NULL,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  CONSTRAINT FK_ORDERS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- Create sequence for ORDERS
CREATE SEQUENCE ORDERS_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for ORDERS auto-increment
CREATE OR REPLACE TRIGGER ORDERS_TRG
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
  SELECT ORDERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  :NEW.CREATED_AT := CURRENT_TIMESTAMP;
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create trigger for ORDERS updated_at
CREATE OR REPLACE TRIGGER ORDERS_UPD_TRG
BEFORE UPDATE ON ORDERS
FOR EACH ROW
BEGIN
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create Order Items table
CREATE TABLE ORDER_ITEMS (
  ID NUMBER PRIMARY KEY,
  ORDER_ID NUMBER NOT NULL,
  PRODUCT_ID NUMBER NOT NULL,
  QUANTITY NUMBER(10) NOT NULL,
  PRICE_AT_TIME NUMBER(10,2) NOT NULL,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  CONSTRAINT FK_ORDER_ITEMS_ORDER FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ID),
  CONSTRAINT FK_ORDER_ITEMS_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
);

-- Create sequence for ORDER_ITEMS
CREATE SEQUENCE ORDER_ITEMS_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for ORDER_ITEMS auto-increment
CREATE OR REPLACE TRIGGER ORDER_ITEMS_TRG
BEFORE INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
  SELECT ORDER_ITEMS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  :NEW.CREATED_AT := CURRENT_TIMESTAMP;
END;
/

-- Create indexes for better performance
CREATE INDEX IDX_PRODUCTS_CATEGORY ON PRODUCTS(CATEGORY_ID);
CREATE INDEX IDX_PRODUCTS_VENDOR ON PRODUCTS(VENDOR_ID);
CREATE INDEX IDX_ORDERS_USER ON ORDERS(USER_ID);
CREATE INDEX IDX_ORDER_ITEMS_ORDER ON ORDER_ITEMS(ORDER_ID);

-- Create a view for product details that joins with category and vendor
CREATE OR REPLACE VIEW PRODUCT_DETAILS AS
SELECT 
  p.ID, p.NAME, p.DESCRIPTION, p.PRICE, p.INVENTORY, p.IMAGE_URL,
  p.IS_ORGANIC, p.IS_LOCAL, p.IS_FRESH_PICKED, p.WEIGHT_KG, p.DIMENSIONS, p.NUTRITIONAL_INFO,
  p.CREATED_AT, p.UPDATED_AT,
  c.ID as CATEGORY_ID, c.NAME as CATEGORY_NAME,
  v.ID as VENDOR_ID, v.BUSINESS_NAME as VENDOR_NAME, v.LOGO_URL as VENDOR_LOGO
FROM
  PRODUCTS p
  JOIN CATEGORIES c ON p.CATEGORY_ID = c.ID
  JOIN VENDORS v ON p.VENDOR_ID = v.ID;

-- Create a view for order details that includes order items
CREATE OR REPLACE VIEW ORDER_DETAILS AS
SELECT
  o.ID, o.USER_ID, o.STATUS, o.TOTAL, 
  o.SHIPPING_ADDRESS, o.SHIPPING_CITY, o.SHIPPING_STATE, o.SHIPPING_POSTAL_CODE, o.SHIPPING_COUNTRY,
  o.SHIPPING_METHOD, o.SHIPPING_FEE, o.PAYMENT_METHOD, o.PAYMENT_STATUS,
  o.CREATED_AT, o.UPDATED_AT,
  u.USERNAME, u.EMAIL, u.FIRST_NAME, u.LAST_NAME
FROM
  ORDERS o
  JOIN USERS u ON o.USER_ID = u.ID;

-- Create a view for vendor details that joins with user information
CREATE OR REPLACE VIEW VENDOR_DETAILS AS
SELECT
  v.ID, v.BUSINESS_NAME, v.DESCRIPTION, v.LOGO_URL, 
  v.ADDRESS, v.CITY, v.STATE, v.POSTAL_CODE, v.COUNTRY,
  v.PHONE, v.WEBSITE, v.BUSINESS_EMAIL, v.CREATED_AT, v.UPDATED_AT,
  u.ID as USER_ID, u.USERNAME, u.EMAIL, u.FIRST_NAME, u.LAST_NAME
FROM
  VENDORS v
  JOIN USERS u ON v.USER_ID = u.ID;

COMMIT;